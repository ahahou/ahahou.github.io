<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叶</title>
  
  <subtitle>叶子( •̀ ω •́ )y</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-01T05:52:23.292Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangyibo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OOAD总结</title>
    <link href="http://yoursite.com/2018/04/30/OOAD%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/04/30/OOAD总结/</id>
    <published>2018-04-30T09:09:10.000Z</published>
    <updated>2018-05-01T05:52:23.292Z</updated>
    
    <content type="html"><![CDATA[<hr><p>先简要的了解一下什么是面向对象：把一切都看成是对象。</p><a id="more"></a><h2 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h2><p><br><br><br><br><strong>基本思想：运用对象，类，继承，聚合，关联，消息和封装（泛化）等概念和原则来构造软件的开发系统。</strong></p><ol><li>客观世界中的事物<strong>都是对象</strong>，对象之间存在一定关系。  </li><li>用对象的<strong>属性</strong>表示事物的数据特征，对象的<strong>操作</strong>表示事物的行为特征。  </li><li>对象把属性和操作结合在一起，成为不可分的独立实体，对外<strong>屏蔽</strong>具体细节。</li><li>通过<strong>抽象</strong>对事物进行分类，类是致谢对象的抽象描述，每个对象都是类的一个实例  </li><li>复杂的对象可以用简单的对象作为<strong>构成</strong>部分。</li><li>特殊类<strong>继承</strong>一般类的属性。</li><li>对象之间通过<strong>消息</strong>将进行通信，以实现对象之间的动态的联系。</li><li>通过<strong>关联</strong>表达类之间的静态关系。  </li></ol><p><br><br><br><br><strong>基本原则：抽象，分类，封装，消息通信，多态性，行为分析和复杂性控制</strong></p><ol><li><strong>抽象：</strong>从事物中舍弃个别的，非本质的特征，而抽取共同的，本质特征的思维方式。<ol><li>过程抽象：形成操作；数据抽象：把数据类型和施加在其上的操作结合在一起形成一种新的数据类型。（类和栈就是数据抽象）。  </li><li>对象是对现实世界中事物的抽象，类是对对象的抽象，一般类是对特殊类的抽象。    </li><li>面向对象的不同开发阶段需要进行不同的抽象。<br><br></li></ol></li><li><strong>分类：</strong>按照某种原则划分事物的区别，有助于认识复杂的世界。<br><br></li><li><strong>封装：</strong><ol><li>把描述一个事物的性质和行为结合在一起，对外形成该事物的一个界限。</li><li>信息屏蔽，外界不能直接存取对象的内部信息（属性），隐藏内部操作，外界也不用知道对外操作的具体细节。<br><br></li></ol></li><li><strong>消息通信：</strong>对象之间只能通过消息进行通信。又封装原则引起。<br><br></li><li><strong>多态性：</strong>一般类和特殊类可以有相同格式的属性和操作，但这些属性和操作具有不同的含义，即不同的数据类型或表现不同的行为。函数重载；运算符重载。<br><br></li><li><strong>行为分析：</strong>通过状态图，交互图进行对象行为分析。<br><br></li><li><strong>复杂性控制：</strong>引入了包的概念。</li></ol><p><br><br><br><br><strong>主要优点：</strong></p><ol><li>从认识论的角度，改变了开发软件的<strong>方式</strong>。</li><li>使得从<strong>客观世界</strong>到<strong>计算机的语言</strong>鸿沟变窄。</li><li>使得<strong>分析</strong>与<strong>设计</strong>之间的鸿沟变窄。</li><li>有助于软件的<strong>维护与复用</strong>。提高了对象的内聚性，减少了与其他对象的耦合。</li><li>有助于提高软件<strong>质量和生产率</strong>。</li></ol><p><br><br><br><br><strong>统一建模语言UML：</strong><br>只是一种建模语言，而不是建模方法；<br>UML独立于开发过程，可以适用于不同的开发过程。<br>UML2.4规范由四个部分组成：</p><ol><li><strong>基础结构</strong>：定义建模语言的核心构造物</li><li><strong>上层结构</strong>：定义建模语言——UML</li><li><strong>对象约束语言</strong>：精确的方式描述基础结构，上层结构及用户建立模型中的表达式和约束    </li><li><strong>图交换</strong>：规定了如何定义用于数据交换的XML文件的格式<br>UML2.4支持的模型图在逻辑上分为：<strong>结构图</strong>（静态方面）和<strong>行为图</strong>（动态方面）  </li></ol><hr><hr><hr><h2 id="面向对象分析"><a href="#面向对象分析" class="headerlink" title="面向对象分析"></a>面向对象分析</h2><p>运用面向对象的方法进行系统分析。<br><br><br><br><br><strong>面临的主要问题：</strong></p><ol><li>问题域和系统责任：<ol><li><strong>问题域：</strong>被开发系统的应用领域，即在现实世界中这个系统所涉及的业务范围。</li><li><strong>系统责任：</strong> 被开发系统应具有的职能。</li></ol></li><li>交流问题</li><li>需求的不断变化</li><li>软件复用的要求<br><br><br><br></li></ol><p><strong>综述</strong></p><p>系统分析：研究问题域，产生一个满足用户需求的系统分析模型。<br>面向对象的软件建模规范——概念与表示法</p><ol><li><strong>概念与表示法</strong><br><br></li><li><strong>OOA模型：</strong>面向对象分析所建立的系统模型，表达了OOA阶段所认识到的系统成分及彼此间的关系。<ol><li>需求模型：用况图</li><li>基本模型： 类图<ol><li>对象层：给出系统中所有反映问题域与系统责任的对象。<strong>类是构成系统的基本单位</strong>。</li><li>特征层：给出每一个类的<strong>内部特征</strong>，给出你每个类的属性和操作。</li><li>关系层：给出各个类之间的<strong>关系</strong>。</li></ol></li><li>辅助模型： 顺序图，活动图，状态图，包图。</li><li>模型规约：文档，进行详说明。  </li></ol></li></ol><p>可以建立对象图，作为类图的补充。</p><p><br></p><hr><hr><hr><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="用况图"><a href="#用况图" class="headerlink" title="用况图"></a>用况图</h3><p> <strong>系统边界：</strong>系统边界是一个系统所包含的所有系统成分与系统以外的事物的分界线。<br> <strong>参与者：</strong>一组在功能上密切相关的角色，当一个事物与系统交互时，该事物要扮演这样的角色。 <strong>参与者不是系统的一部分，他们位于系统之外，是在系统之外的与系统交互的任何事物。</strong></p><pre><code>*识别参与者*：1. **人员**：直接使用系统的人员中发现参与者。2. **外部系统**：所有与本系统交互的外部系统都是参与者。3. **设备**：与系统相连，像系统提供外界信息；也可能系统向设备提供信息，设备在系统的控制下运行（不包括监视器，键盘，鼠标这样的标准用户接口设别）。    </code></pre><p> <strong>用况：</strong>一个用况是描述系统的一项功能的一组动作序列，这样的动作序列表示参与者与系统的交互，系统执行该动作序列<strong>要为参与者产生结果</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>注意：</strong><br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 用况是一种<strong>类型</strong>，它是要被<strong>实例化执行</strong>的。<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 用况描述中的一个动作应该<strong>描述参与者</strong>或<strong>系统要完成的一个交互步骤</strong>。<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 执行用况的一个动作序列要为参与者<strong>产生可观察的结果</strong>。<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4. 保证用况所对应的<strong>功能完整</strong>，用况不分层，不能说上层的用况是由下层较小的用况组成。<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5. 用况<strong>不说明</strong>具体<strong>细节</strong>。  </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>关系：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与参与者之间：<strong>关联</strong> 是参与者与用况的唯一关系。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用况间的关系：<strong>包含</strong>， <strong>扩展</strong>，<strong>继承</strong>。  </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>捕获用况：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 从<strong>参与者</strong>的角度。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 从<strong>系统功能</strong>的角度。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 利用<strong>场景</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>用况模板</strong><br> <strong>用况图</strong><br>  定义： 是由<strong>参与者</strong>，<strong>用况</strong>以及这些元素之间的的<strong>关系</strong>组成的图。<br>  检查与调整：<br>  每个<strong>参与者至少与一个用况相关联</strong>。<br>  参与者之间可以有<strong>继承</strong>关系<br>  不能按照人机界面建立用况，<strong>界面不是用况，用况也不是界面</strong>。  </p><hr><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p> 类图描述了系统中各类对象以及他们之间的各种关系。  </p><h4 id="概念与表示法"><a href="#概念与表示法" class="headerlink" title="概念与表示法"></a>概念与表示法</h4><p> <strong>对象：</strong> 是具有明确的语义边界并封装了状态和行为的实体，由一组属性和作用在这组属性上的一组操作构成，他是构成软件系统的<strong>基本单位</strong>。<br> <strong>类：</strong>是具有<strong>相同属性</strong>和<strong>操作</strong>的一组对象的统一抽象描述，对象是类的实例。<br> <strong>对象的审查和筛选</strong>  </p><pre><code>- 舍弃无用对象：1.通过**属性**判断；2.通过**操作**判断。  - 进件对象：只有**一个**属性或操作的对象。 - 推迟到**OOD**考虑的对象。     </code></pre><p> <strong>抽象出类并进行调整</strong><br> <strong>主动对象及主动行为：</strong></p><pre><code>- 主动对象：具有**主动行为**的对象，在设计阶段是拥有线程或进程并启动**控制活动**的对象  。- 主动类：是其实例为主动对象的类。    </code></pre><p> <strong>建立类的对象层</strong> </p><h4 id="属性和操作"><a href="#属性和操作" class="headerlink" title="属性和操作"></a>属性和操作</h4><ol><li>属性： 描述对象性质的<strong>数据项</strong>。<br>格式： [可见性] 属性名[：类型] [=初始值]    </li><li>操作： 类的对象被要求提供的<strong>服务的规约</strong>。<br>格式：[可见性] 操作名 [ (参数列表) ] [：返回类型]</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;先简要的了解一下什么是面向对象：把一切都看成是对象。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你</title>
    <link href="http://yoursite.com/2018/04/29/%E4%BD%A0/"/>
    <id>http://yoursite.com/2018/04/29/你/</id>
    <published>2018-04-29T15:11:32.000Z</published>
    <updated>2018-04-30T03:24:17.557Z</updated>
    
    <content type="html"><![CDATA[<p><img src="assets/img/me.jpg" alt=""></p><h3 id="博客终于建好了"><a href="#博客终于建好了" class="headerlink" title="博客终于建好了"></a>博客终于建好了</h3><h3 id="非常开心，你是我的博客的第一个浏览者"><a href="#非常开心，你是我的博客的第一个浏览者" class="headerlink" title="非常开心，你是我的博客的第一个浏览者"></a>非常开心，你是我的博客的第一个浏览者</h3><p>当然，作为第一个浏览者，我也要给你写些东西吧，开业大酬宾。<br>我想了好久，不知道写啥。<br>不过在我的不懈努力下，还是想到了。<br>嘻嘻(●’◡’●)</p><a id="more"></a><h2 id="乐华"><a href="#乐华" class="headerlink" title="乐华"></a>乐华</h2><p><img src="/assets/blogimg/lh1.jpg" alt=""><br><br><br><img src="/assets/blogimg/lh2.jpg" alt=""><br><br><br><br><br>我记得那天我们去了好多地方。<br>在大唐芙蓉园，散了步，看见了好多拍婚纱照的人。<br>在海洋馆，看了好多小动物，当然我觉得海洋馆最多的还是小孩纸。<br>在乐华，玩了好多过山车，看了5D电影，不过你没玩跳楼机哦。<br><br></p><h2 id="做蛋糕"><a href="#做蛋糕" class="headerlink" title="做蛋糕"></a>做蛋糕</h2><p><img src="/assets/blogimg/zdg2.jpg" alt=""><br><br></p><p><img src="/assets/blogimg/zdg.jpg" alt=""><br><br><br>这是元旦。<br>一大早，去看电影，结果进不去，就在底下各种找进去的路。<br>下午去做蛋糕喽，咱么的蛋糕好可爱。<br><br></p><h2 id="西安电视塔"><a href="#西安电视塔" class="headerlink" title="西安电视塔"></a>西安电视塔</h2><p><img src="/assets/blogimg/tv.jpg" alt=""><br><br></p><p><img src="/assets/blogimg/tv2.jpg" alt=""><br><br><br>在西安电视塔的最高处，站在玻璃上。<br>我一想到你在上面不敢走动，就想笑，你真是太可爱啦。<br>在科技馆，走那个玻璃迷宫，你不停的撞。<br>夜里买了书，吃了泡馍。<br><br></p><h2 id="樱花"><a href="#樱花" class="headerlink" title="樱花"></a>樱花</h2><p><img src="/assets/blogimg/yh.jpg" alt=""><br><br></p><p><img src="/assets/blogimg/yh2.jpg" alt=""><br><br><br>樱花开了，赏花去喽。</p><p><strong>嗯 放张合照吧</strong><br><img src="/assets/blogimg/hez.jpg" alt=""><br><br></p><h2 id="全都是你啦"><a href="#全都是你啦" class="headerlink" title="全都是你啦"></a>全都是你啦</h2><p><img src="/assets/blogimg/yz.jpg" alt=""><br><img src="/assets/blogimg/yz1.jpg" alt=""><br><img src="/assets/blogimg/yz2.jpg" alt=""><br><img src="/assets/blogimg/yz3.jpg" alt=""></p><p><br></p><h2 id="嗯-是不是该抒情了"><a href="#嗯-是不是该抒情了" class="headerlink" title="嗯 是不是该抒情了"></a>嗯 是不是该抒情了</h2><p><strong>我喜欢的样子，你都有</strong></p><p align="right"> —《甜甜的》周杰伦</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;assets/img/me.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;博客终于建好了&quot;&gt;&lt;a href=&quot;#博客终于建好了&quot; class=&quot;headerlink&quot; title=&quot;博客终于建好了&quot;&gt;&lt;/a&gt;博客终于建好了&lt;/h3&gt;&lt;h3 id=&quot;非常开心，你是我的博客的第一个浏览者&quot;&gt;&lt;a href=&quot;#非常开心，你是我的博客的第一个浏览者&quot; class=&quot;headerlink&quot; title=&quot;非常开心，你是我的博客的第一个浏览者&quot;&gt;&lt;/a&gt;非常开心，你是我的博客的第一个浏览者&lt;/h3&gt;&lt;p&gt;当然，作为第一个浏览者，我也要给你写些东西吧，开业大酬宾。&lt;br&gt;我想了好久，不知道写啥。&lt;br&gt;不过在我的不懈努力下，还是想到了。&lt;br&gt;嘻嘻(●’◡’●)&lt;/p&gt;
    
    </summary>
    
    
      <category term="叶子" scheme="http://yoursite.com/tags/%E5%8F%B6%E5%AD%90/"/>
    
  </entry>
  
</feed>
